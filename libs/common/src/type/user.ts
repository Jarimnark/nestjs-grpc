// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface Empty {
}

export interface DepartmentSummary {
  department: { [key: string]: AggregateData };
}

export interface DepartmentSummary_DepartmentEntry {
  key: string;
  value: AggregateData | undefined;
}

export interface AggregateData {
  male: number;
  female: number;
  ageRange: string;
  hair: { [key: string]: number };
  addressUser: { [key: string]: string };
}

export interface AggregateData_HairEntry {
  key: string;
  value: number;
}

export interface AggregateData_AddressUserEntry {
  key: string;
  value: string;
}

/**
 * Define the user message
 * User message
 */
export interface User {
  id: number;
  firstName: string;
  lastName: string;
  maidenName: string;
  age: number;
  gender: string;
  email: string;
  phone: string;
  username: string;
  password: string;
  birthDate: string;
  image: string;
  bloodGroup: string;
  height: number;
  weight: number;
  eyeColor: string;
  hair: Hair | undefined;
  ip: string;
  address: Address | undefined;
  macAddress: string;
  university: string;
  bank: Bank | undefined;
  company: Company | undefined;
  ein: string;
  ssn: string;
  userAgent: string;
  crypto: Crypto | undefined;
  role: string;
}

/** Hair details */
export interface Hair {
  color: string;
  type: string;
}

/** Address details */
export interface Address {
  address: string;
  city: string;
  state: string;
  stateCode: string;
  postalCode: string;
  coordinates: Coordinates | undefined;
  country: string;
}

/** Coordinates details */
export interface Coordinates {
  lat: number;
  lng: number;
}

/** Bank details */
export interface Bank {
  cardExpire: string;
  cardNumber: string;
  cardType: string;
  currency: string;
  iban: string;
}

/** Company details */
export interface Company {
  department: string;
  name: string;
  title: string;
  address: Address | undefined;
}

/** Crypto details */
export interface Crypto {
  coin: string;
  wallet: string;
  network: string;
}

export const USER_PACKAGE_NAME = "user";

export interface UserAggServiceClient {
  aggregateUser(request: Empty): Observable<DepartmentSummary>;
}

export interface UserAggServiceController {
  aggregateUser(request: Empty): Promise<DepartmentSummary> | Observable<DepartmentSummary> | DepartmentSummary;
}

export function UserAggServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["aggregateUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserAggService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserAggService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_AGG_SERVICE_NAME = "UserAggService";
